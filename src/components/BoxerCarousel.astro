---
import BoxerSlideCarousel from "@/components/BoxerSlideCarousel.astro"
import ChevronIcon from "@/components/ChevronIcon.astro"
import LVDALogo from "@/components/LVDALogo.astro"
import { BOXERS, type Boxer } from "@/consts/boxers"

const alreadyAdded: string[] = []
---

<section id="carousel-boxers" class="relative h-min w-full overflow-hidden sm:mx-0">
	<div id="carousel-wrapper" class="flex animate-fade-in flex-nowrap transition-transform">
		{
			BOXERS.map((boxer) => {
				let { versus } = boxer
				if (typeof versus === "string") {
					versus = [versus]
				}

				return versus.map((rival) => {
					const hash = `${boxer.id}.${rival}`
					const reverseHash = `${rival}.${boxer.id}`

					if (alreadyAdded.includes(hash) || alreadyAdded.includes(reverseHash)) return

					const boxerRival = BOXERS.find((boxer: Boxer) => boxer.id === rival)
					alreadyAdded.push(hash)

					return <BoxerSlideCarousel leftBoxer={boxer} rigthBoxer={boxerRival!} />
				})
			})
		}
	</div>
	<hr
		class="h-[2px] w-full border-t-0"
		style="background:linear-gradient(to right, transparent 0%, white 50%, transparent 100%)"
	/>
	<div class="absolute inset-0 -z-10 flex items-start justify-center">
		<LVDALogo
			style={`
				filter: drop-shadow(0 0 14px rgba(var(--color-accent-rgb), 0.4));
			`}
			className="w-full min-w-[600px] max-w-4xl items-center"
		/>
	</div>
	<div class="flex justify-center">
		<div class="relative flex w-full items-center md:w-auto">
			<button
				id="prev-button"
				class="button-action px-24 py-4 text-center text-primary hover:text-accent md:h-32"
				><ChevronIcon class="rotate-180" /></button
			>
			<div
				id="number-figth"
				class="absolute left-2/4 top-2/4 -translate-x-2/4 -translate-y-2/4 text-nowrap text-primary"
			>
				<span>Primer</span> combate
			</div>
			<button
				id="next-button"
				class="button-action px-24 py-4 text-center text-primary hover:text-accent md:h-32"
				><ChevronIcon /></button
			>
		</div>
	</div>
</section>

<style>
	.button-action:hover {
		background: linear-gradient(to bottom, rgba(255, 255, 255, 0.1) 0%, transparent 100%);
		transition: all 0.5s ease;
	}
</style>

<script>
	import { $ } from "@/consts/dom-selector"

	const $prevButton = $("#prev-button")
	const $nextButton = $("#next-button")
	const $wrapper = $("#carousel-wrapper")
	const $fightBox = $("#number-figth")
	const $fight = $fightBox.querySelector("span")!
	const $slides = Array.from($wrapper.querySelectorAll("article"))
	let index: number = 0
	const slidesLength = $slides.length

	const figthText: Record<number, string> = [
		"Primer",
		"Segundo",
		"Tercer",
		"Cuarto",
		"Quinto",
		"Sexto",
		"Septimo",
		"Octavo",
	]

	const fadeInOutEffect = () => {
		$wrapper.classList.remove("animate-fade-in")
		$fightBox.classList.remove("animate-fade-in")
		$wrapper.classList.add("animate-fade-out")
		$fightBox.classList.add("animate-fade-out")
		setTimeout(() => {
			$wrapper.classList.add("animate-fade-in")
			$fightBox.classList.add("animate-fade-in")
			$wrapper.classList.remove("animate-fade-out")
			$fightBox.classList.remove("animate-fade-out")
		}, 700)
	}

	$prevButton.addEventListener("click", () => {
		fadeInOutEffect()
		index--
		setTimeout(() => {
			if (index < 0) index = slidesLength - 1
			const translatedX = index * -100
			console.log({ translatedX, index })
			$wrapper.style.transform = `translateX(${translatedX}%)`
			$fight.innerText = `${figthText[index]}`
		}, 600)
	})

	$nextButton.addEventListener("click", () => {
		fadeInOutEffect()
		index++
		setTimeout(() => {
			if (index === slidesLength) index = 0
			const translatedX = index * -100
			console.log({ translatedX, index })
			$wrapper.style.transform = `translateX(${translatedX}%)`
			$fight.innerText = `${figthText[index]}`
		}, 600)
	})
</script>
