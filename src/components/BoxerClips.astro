---
import Typography from "@/components/Typography.astro"

interface Props {
	clips?: Array<{
		text: string
		youtube_id: string
	}>
}

const { clips = [] } = Astro.props
const hasClips = clips.length > 0
---

{
	hasClips && (
		<section class="mt-10 grid select-none grid-cols-1 place-content-center gap-2 gap-x-8 md:grid-cols-2 md:gap-4 lg:grid-cols-3">
			{clips.map(({ text, youtube_id }) => (
				<button
					class="clipButton group flex flex-col items-center justify-between bg-gradient-to-b p-8 hover:from-zinc-600/25"
					data-video-id={"ct0Hr6zYZGU"}
		
				>
					<Typography
						as="h3"
						variant="atomic-title"
						color="primary"
						class:list={
							"flex flex-1 -skew-y-2 items-center justify-center text-center transition group-hover:scale-110"
						}
					>
						"{text.toLowerCase()}"
					</Typography>

					<footer class="mt-2 flex items-end justify-center p-5 text-center">
						<Typography
							as="p"
							variant="body"
							color="neutral"
							class:list={"text-center group-hover:text-accent"}
						>
							Ver clip
						</Typography>
					</footer>
				</button>
			))}
			<div id="modal" class="fixed inset-0 z-50 hidden  bg-black bg-opacity-50">
				<div class="relative flex h-full items-center justify-center">
					<button
						class="fixed right-4 top-4 z-50 bg-black bg-opacity-50 p-4 text-white"
						id="modalClose"
					>
						<svg
							xmlns="http://www.w3.org/2000/svg"
							class="h-8 w-8"
							viewBox="0 0 24 24"
							stroke-width="2"
							stroke="currentColor"
							fill="none"
							stroke-linecap="round"
							stroke-linejoin="round"
						>
							<line x1="18" y1="6" x2="6" y2="18" />
							<line x1="6" y1="6" x2="18" y2="18" />
						</svg>
					</button>
					<button class="bg-black bg-opacity-50 p-4 text-white" id="modalPrevious">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							class="h-8 w-8"
							viewBox="0 0 24 24"
							stroke-width="2"
							stroke="currentColor"
							fill="none"
							stroke-linecap="round"
							stroke-linejoin="round"
						>
							<polyline points="15 18 9 12 15 6" />
						</svg>
					</button>
					<div id="lite-youtube" class="w-3/4" />
					<button class="bg-black bg-opacity-50 p-4 text-white" id="modalNext">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							class="h-8 w-8"
							viewBox="0 0 24 24"
							stroke-width="2"
							stroke="currentColor"
							fill="none"
							stroke-linecap="round"
							stroke-linejoin="round"
						>
							<polyline points="9 18 15 12 9 6" />
						</svg>
					</button>
				</div>
			</div>
		</section>
	)
}

<script>
	// import { $, $$ } from "@/lib/dom-selector"
	import { $, $$ } from "@/lib/dom-selector"

	// customElements.define("lite-youtube", LiteYTEmbed)

	const modal = $("#modal")
	const modalCloseButton = $("#modalClose")
	const buttons = $$(".group")

	modalCloseButton.addEventListener("click", () => {
		toggleModal()
	})

	buttons.forEach((button) => {
		button.addEventListener("click", () => {
			const videoId = button.getAttribute("data-video-id")
			const liteYoutube = $("#lite-youtube")
			if (liteYoutube && videoId) {
				liteYoutube.innerHTML = generateLiteYoutube(videoId, "Video")
			}

			toggleModal()
		})
	})

	function generateLiteYoutube(videoId: string, title: string) {
		return `<lite-youtube
			id="lite-youtube-video w-auto"
			videoid="${videoId}">
			<a
		href="https://youtube.com/watch?v=${videoId}"
		class="lty-playbtn bg-red-500"
		title="${title}"
		role="button"
		tabindex="0"
	>
		<span class="lyt-visually-hidden">${title}</span>
	</a>
			</lite-youtube>`
	}

	function toggleModal() {
		modal.classList.toggle("hidden")
		document.body.classList.toggle("overflow-hidden")
	}
</script>
<style is:global>
	lite-youtube {
		background-color: #000;
		position: relative;
		display: block;
		contain: content;
		background-position: center center;
		background-size: cover;
		cursor: pointer;
		aspect-ratio: 16/9;
		width: 100%;
		height: auto;
		border: 2px solid var(--color-accent);
		transition: all 0.3s ease;
		box-shadow: 0px 0px 15px rgb(212, 255, 0, 0.1);
	}

	/* gradient */
	lite-youtube::before {
		content: attr(data-title);
		display: block;
		position: absolute;
		top: 0;
		/* Pixel-perfect port of YT's gradient PNG, using https://github.com/bluesmoon/pngtocss plus optimizations */
		background-image: linear-gradient(
			180deg,
			rgb(0 0 0 / 67%) 0%,
			rgb(0 0 0 / 54%) 14%,
			rgb(0 0 0 / 15%) 54%,
			rgb(0 0 0 / 5%) 72%,
			rgb(0 0 0 / 0%) 94%
		);
		height: 99px;
		width: 100%;
		font-family: "YouTube Noto", Roboto, Arial, Helvetica, sans-serif;
		color: hsl(0deg 0% 93.33%);
		text-shadow: 0 0 2px rgba(0, 0, 0, 0.5);
		font-size: 18px;
		padding: 25px 20px;
		overflow: hidden;
		white-space: nowrap;
		text-overflow: ellipsis;
		box-sizing: border-box;
	}

	lite-youtube:hover::before {
		color: white;
	}

	/* responsive iframe with a 16:9 aspect ratio
    thanks https://css-tricks.com/responsive-iframes/
*/
	lite-youtube::after {
		content: "";
		display: block;
		padding-bottom: calc(100% / (16 / 9));
	}
	lite-youtube > iframe {
		width: 100%;
		height: 100%;
		position: absolute;
		top: 0;
		left: 0;
		border: 0;
	}

	/* play button */
	lite-youtube > .lty-playbtn {
		display: block;
		/* Make the button element cover the whole area for a large hover/click target… */
		width: 100%;
		height: 100%;
		/* …but visually it's still the same size */
		background: no-repeat center/100px 100px;
		/* YT's actual play button svg */
		background-image: url('data:image/svg+xml;utf8,<svg stroke="white" fill="white" stroke-width="0" viewBox="0 0 1024 1024"  xmlns="http://www.w3.org/2000/svg"><path d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"></path><path d="M719.4 499.1l-296.1-215A15.9 15.9 0 0 0 398 297v430c0 13.1 14.8 20.5 25.3 12.9l296.1-215a15.9 15.9 0 0 0 0-25.8zm-257.6 134V390.9L628.5 512 461.8 633.1z"></path></svg>');
		position: absolute;
		cursor: pointer;
		z-index: 1;
		filter: grayscale(100%);
		transition:
			filter 0.1s cubic-bezier(0, 0, 0.2, 1),
			transform 0.3s ease;
		border: 0;
	}

	lite-youtube:hover > .lty-playbtn,
	lite-youtube .lty-playbtn:focus {
		background-image: url('data:image/svg+xml;utf8,<svg stroke="white" fill="greenyellow" stroke-width="0" viewBox="0 0 1024 1024"  xmlns="http://www.w3.org/2000/svg"><path d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"></path><path d="M719.4 499.1l-296.1-215A15.9 15.9 0 0 0 398 297v430c0 13.1 14.8 20.5 25.3 12.9l296.1-215a15.9 15.9 0 0 0 0-25.8zm-257.6 134V390.9L628.5 512 461.8 633.1z"></path></svg>');
		filter: none;
		transform: scale(1.23);
	}

	@media (prefers-reduced-motion) {
		lite-youtube:hover > .lty-playbtn,
		lite-youtube .lty-playbtn:focus {
			transition: 0s;
			transform: scale(1);
		}
	}

	/* Post-click styles */
	lite-youtube.lyt-activated {
		cursor: unset;
	}
	lite-youtube.lyt-activated::before,
	lite-youtube.lyt-activated > .lty-playbtn {
		opacity: 0;
		pointer-events: none;
	}

	.lyt-visually-hidden {
		clip: rect(0 0 0 0);
		clip-path: inset(50%);
		height: 1px;
		overflow: hidden;
		position: absolute;
		white-space: nowrap;
		width: 1px;
	}
</style>
